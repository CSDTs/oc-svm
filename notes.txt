2/12
See; https://hackernoon.com/one-class-classification-for-images-with-deep-features-be890c43455d
See: https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html

See: https://github.com/onnx/models#image_classification
for layers, note MobileNet and ShuffleNet

for a good way to use CNNs on images as features and then pass
to the OC-SVM for training, prediction

The issue is that we don't really understand the feature space, depending on
the CNN, we have these texture basises, not sure how to manipulate or explain that

Could have to students learn the basis? Would be easier if it was better grounded
--

2/14
See Skorch for working in pytorch
https://skorch.readthedocs.io/en/stable/user/installation.html

So there's something of a slight decision point,
The first hackernoon reference shows an end to end way to train on OC SVM with CNN features,
using Keras. But I've been advised to use PyTorch. I also want to get results ASAP.
There is also a deep OC features approach, here: https://github.com/PramuPerera/DeepOneClass
it uses Caffe though.

Okay so I think I should just reproduce the tutorial above and then swap in my dataaset and
report on results, set up an API somewhere
--
2/18

Okay, so what I'll do here is reproduce https://hackernoon.com/one-class-classification-for-images-with-deep-features-be890c43455d
within this cookie cutter data science frame work

note, vscode hot tip, fn+shift  on  mac in ipython will recall the previously entered command w/o 
scrolling up in the current command
-
note that tensorflow has no support for GPUs on macs (not NVIDIA) :___(
    this means if i run this elsewhere I should make sure I'm using the GPU'ed tensorflow
    or run w/in a Google colab
--
I'm starting to think that if i want to have results in hand before 5pm I might be
better off just busting this out in ipython, save the output and port to a the cookie cutter
reproducibale format later.
--
k, let's try it ...

okay I get
(oc-svm) bash-3.2$ python extract_features.py 
Using TensorFlow backend.
[INFO] loading network...
2020-02-18 15:14:22.733788: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2020-02-18 15:14:22.796471: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x7fc9ebc3c6c0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2020-02-18 15:14:22.796496: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
/Users/kwamepr/.local/share/virtualenvs/oc-svm-EfKF6l7S/lib/python3.7/site-packages/keras_applications/resnet50.py:265: UserWarning: The output shape of `ResNet50(include_top=False)` has been changed since Keras 2.2.0.
  warnings.warn('The output shape of `ResNet50(include_top=False)` '
Downloading data from https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5
94658560/94653016 [==============================] - 4s 0us/step

but note
```
The output of the max-pooling layer has a volume shape of 7 x 7 x 512 which we flatten into a feature vector of 21,055-dim.
```
which suggests that I should do pool=max
see:
https://github.com/keras-team/keras-applications/blob/master/keras_applications/resnet50.py#L256-L266
pool = 'max'

we should see a 7 x 7 512 matrix, flatted into a 21,055 dim feature vector
(for one image!?)
--
anyway, let's re-run with this
